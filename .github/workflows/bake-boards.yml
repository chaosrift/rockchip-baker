name: Bake Boards
run-name: Bake Boards on ${{ inputs.runner }} for ${{ inputs.boards }}

on:
  workflow_dispatch:
    inputs:
      manifest:
        description: 'Manifest to sync'
        required: false
        default: ''
        type: string

      runner:
        description: 'Runner label to use for all jobs'
        required: false
        default: ubuntu-22.04
        type: choice
        options:
          - ubuntu-22.04
          - ubuntu-24.04
          - '["self-hosted","linux","x64"]'

      proxy:
        description: 'Optional proxy URL (e.g. http://user:pass@proxy:3128)'
        required: false
        default: ''
        type: string

      boards:
        description: 'Comma-separated list of board configs to build (e.g. "handy_hpd5kx_rk3588_debian_gnome_linux6.1,rockchip_rk3588_evb1_lp4_v10_amp")'
        required: true
        type: string

      build_ref:
        description: 'Optional build reference (e.g. commit SHA or tag)'
        required: false
        default: ''
        type: string

      release_tag:
        description: 'Release tag for the image'
        required: false
        type: string
        default: ''

  repository_dispatch:
    types: [build-boards]

env:
  RECIPE_REP: 'diverger/manifest-rockchip'
  RECIPE_REF: ${{ github.event.client_payload.build_ref || 'handy' }}
  RECIPE_DIR: "."

  BOARDS_TO_BUILD: ${{ github.event.inputs.boards_to_build || github.event.client_payload.boards_to_build || 'handy-hpd5kx-aim7' }}
  EFFECTIVE_TRIGGER_SOURCE: ${{ github.event.client_payload.trigger_source || github.event_name }}
  EFFECTIVE_RELEASE_TAG: ${{ github.event.inputs.release_tag || github.event.client_payload.release_tag || '' }}
  EFFECTIVE_RUNNER: ${{ github.event.inputs.runner || github.event.client_payload.runner || 'ubuntu-latest' }}
  BUILD_TYPE: ${{ github.event.inputs.build_type || github.event.client_payload.build_type || 'nightly' }}

jobs:
  # Job to determine build matrix based on available boards
  setup:
    runs-on: ${{ (startsWith(inputs.runner, '[') && fromJson(inputs.runner)) || inputs.runner }}
    name: Setup Build Matrix
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}

    steps:

      - name: Checkout build repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REP }}
          ref: ${{ env.RECIPE_REF }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_DIR }}
          clean: false
          fetch-depth: 1
          sparse-checkout: |
            .github
          sparse-checkout-cone-mode: false

      - name: Generate Build Matrix
        id: matrix
        shell: bash
        run: |

          # Source logging tool for pretty output
          source ./.github/scripts/logging/init-logging.sh

          # Get boards from either workflow_dispatch inputs or repository_dispatch payload
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BOARDS_INPUT="${{ inputs.boards }}"
            display_alert "Info" "Using workflow_dispatch boards: $BOARDS_INPUT" "info"
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            BOARDS_INPUT="${{ github.event.client_payload.boards }}"
            display_alert "Info" "Using repository_dispatch boards: $BOARDS_INPUT" "info"
          else
            display_alert "Error" "Unsupported event type: ${{ github.event_name }}" "err"
            exit 1
          fi

          if [ -z "$BOARDS_INPUT" ]; then
            display_alert "Error" "No boards specified in input" "err"
            display_alert "Info" "Please provide a comma-separated list of board configs to build." "info"
            display_alert "Info" "Example: 'handy_hpd5kx_rk3588_debian_gnome_linux6.1,rockchip_rk3588_evb1_lp4_v10_amp'" "info"
            exit 1
          fi

          # Parse boards from input (comma-separated list)
          IFS=',' read -ra BOARDS <<< "$BOARDS_INPUT"

          # Trim whitespace and validate boards are not empty
          VALID_BOARDS=()
          for board in "${BOARDS[@]}"; do
            board=$(echo "$board" | xargs) # trim whitespace
            if [ -n "$board" ]; then
              VALID_BOARDS+=("$board")
              display_alert "Info" "Added board: $board" "info"
            fi
          done

          if [ ${#VALID_BOARDS[@]} -eq 0 ]; then
            display_alert "Error" "No valid boards found in input" "err"
            exit 1
          fi

          BOARDS=("${VALID_BOARDS[@]}")

          # Generate and set matrix output (single loop, direct output)
          MATRIX_JSON=$(printf '{"include":['; for i in "${!BOARDS[@]}"; do [ "$i" -ne 0 ] && printf ','; printf '{"board":"%s"}' "${BOARDS[$i]}"; done; printf ']}')
          {
            echo "matrix<<EOF"
            echo "$MATRIX_JSON"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          # Pretty print matrix using logging tool
          if command -v jq >/dev/null 2>&1; then
            PRETTY_MATRIX=$(echo "$MATRIX_JSON" | jq .)
          else
            PRETTY_MATRIX="$MATRIX_JSON"
          fi

          display_alert "Generated matrix:" "$PRETTY_MATRIX" "info"

  # Parallel U-Boot builds
  build-uboot:
    needs: setup
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && ((startsWith(inputs.runner, '[') && fromJson(inputs.runner)) || inputs.runner)) || (github.event_name == 'repository_dispatch' && (github.event.client_payload.runner || 'ubuntu-22.04')) }}
    name: "Uboot: ${{ matrix.board }}"
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:

      - name: Checkout build repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REP }}
          ref: ${{ env.RECIPE_REF }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_DIR }}
          clean: false
          fetch-depth: 1
          sparse-checkout: |
            .github
          sparse-checkout-cone-mode: false

      - name: Repo Sync
        id: repo-sync
        uses: ./.github/actions/repo-syncer
        with:
          manifest: ${{ (github.event_name == 'workflow_dispatch' && inputs.manifest) || (github.event_name == 'repository_dispatch' && github.event.client_payload.manifest) || '' }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          proxy: ${{ (github.event_name == 'workflow_dispatch' && inputs.proxy) || (github.event_name == 'repository_dispatch' && github.event.client_payload.proxy) || '' }}

      - name: Build U-Boot
        uses: ./.github/actions/uboot-baker
        with:
          chip_board: ${{ matrix.board }}
          merged_manifest_path: ${{ steps.repo-sync.outputs.merged_manifest_path }}
          artifacts_name: "u-boot-${{ matrix.board }}"

  # Parallel Kernel builds
  build-kernel:
    needs: setup
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && ((startsWith(inputs.runner, '[') && fromJson(inputs.runner)) || inputs.runner)) || (github.event_name == 'repository_dispatch' && (github.event.client_payload.runner || 'ubuntu-22.04')) }}
    name: "Kernel: ${{ matrix.board }}"
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:

      - name: Checkout build repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REP }}
          ref: ${{ env.RECIPE_REF }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_DIR }}
          clean: false
          fetch-depth: 1
          sparse-checkout: |
            .github
          sparse-checkout-cone-mode: false

      - name: Repo Sync
        id: repo-sync
        uses: ./.github/actions/repo-syncer
        with:
          manifest: ${{ (github.event_name == 'workflow_dispatch' && inputs.manifest) || (github.event_name == 'repository_dispatch' && github.event.client_payload.manifest) || '' }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          proxy: ${{ (github.event_name == 'workflow_dispatch' && inputs.proxy) || (github.event_name == 'repository_dispatch' && github.event.client_payload.proxy) || '' }}

      - name: Build Kernel
        uses: ./.github/actions/kernel-baker
        with:
          chip_board: ${{ matrix.board }}
          merged_manifest_path: ${{ steps.repo-sync.outputs.merged_manifest_path }}
          artifacts_name: "kernel-${{ matrix.board }}"

  # Parallel Rootfs builds
  build-rootfs:
    needs: setup
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && ((startsWith(inputs.runner, '[') && fromJson(inputs.runner)) || inputs.runner)) || (github.event_name == 'repository_dispatch' && (github.event.client_payload.runner || 'ubuntu-22.04')) }}
    name: "Rootfs: ${{ matrix.board }}"
    timeout-minutes: 240
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: diverger/manifest-rockchip
          ref: handy
          sparse-checkout: |
            .github
          sparse-checkout-cone-mode: false
          token: ${{ secrets.GH_ACCESS_TOKEN }}


      - name: Repo Sync
        id: repo-sync
        uses: ./.github/actions/repo-syncer
        with:
          manifest: ${{ (github.event_name == 'workflow_dispatch' && inputs.manifest) || (github.event_name == 'repository_dispatch' && github.event.client_payload.manifest) || '' }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          proxy: ${{ (github.event_name == 'workflow_dispatch' && inputs.proxy) || (github.event_name == 'repository_dispatch' && github.event.client_payload.proxy) || '' }}

      - name: Build Rootfs
        uses: ./.github/actions/rootfs-baker
        with:
          chip_board: ${{ matrix.board }}
          merged_manifest_path: ${{ steps.repo-sync.outputs.merged_manifest_path }}
          artifacts_name: "rootfs-${{ matrix.board }}"

  # Final image assembly (depends on all components)
  build-image:
    needs: [setup, build-uboot, build-kernel, build-rootfs]
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && ((startsWith(inputs.runner, '[') && fromJson(inputs.runner)) || inputs.runner)) || (github.event_name == 'repository_dispatch' && (github.event.client_payload.runner || 'ubuntu-22.04')) }}
    name: "Image: ${{ matrix.board }}"
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: diverger/manifest-rockchip
          ref: handy
          sparse-checkout: |
            .github
          sparse-checkout-cone-mode: false
          token: ${{ secrets.GH_ACCESS_TOKEN }}


      - name: Repo Sync
        id: repo-sync
        uses: ./.github/actions/repo-syncer
        with:
          manifest: ${{ (github.event_name == 'workflow_dispatch' && inputs.manifest) || (github.event_name == 'repository_dispatch' && github.event.client_payload.manifest) || '' }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          proxy: ${{ (github.event_name == 'workflow_dispatch' && inputs.proxy) || (github.event_name == 'repository_dispatch' && github.event.client_payload.proxy) || '' }}

      # Build final image using image-baker action
      - name: Build Final Image
        uses: ./.github/actions/image-baker
        with:
          chip_board: ${{ matrix.board }}
          merged_manifest_path: ${{ steps.repo-sync.outputs.merged_manifest_path }}
          u-boot_artifact_name: "u-boot-${{ matrix.board }}"
          kernel_artifact_name: "kernel-${{ matrix.board }}"
          rootfs_artifact_name: "rootfs-${{ matrix.board }}"
          artifacts_name: "final-image-${{ matrix.board }}"

  # Summary job to report build status
  build-summary:
    if: ${{ always() }}
    needs: [setup, build-uboot, build-kernel, build-rootfs, build-image]
    runs-on: ubuntu-latest
    name: Build Summary

    steps:
      - name: Generate Build Summary
        shell: bash
        run: |
          echo "# Multi-Board Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Build Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Manifest**: ${{ inputs.manifest || 'default' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner**: ${{ inputs.runner }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Boards**: ${{ inputs.boards || 'all boards' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Build Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | ${{ needs.setup.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| U-Boot | ${{ needs.build-uboot.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Kernel | ${{ needs.build-kernel.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Rootfs | ${{ needs.build-rootfs.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Final Image | ${{ needs.build-image.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "Check the individual job logs for detailed build information."
